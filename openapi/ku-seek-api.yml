openapi: 3.0.0

info:
  title: KU SEEK 
  description: CRUD operations for KU SEEK
  version: 2.0.0

servers:
  - url: /api/v1

paths:
  /csrf-token:
    get:
      summary: Get a csrf-token for form validation
      operationId: controllers.auth_controller.get_csrf_token
      responses:
        200:
          description: Return a csrf-token for validation
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrf_token: 
                    type: string

  /refresh:
    get:
      summary: Get a new access token from a refesh token
      operationId: controllers.auth_controller.get_new_access_token
      parameters:
        - in: cookie
          name: refresh_token
          schema:
            type: string
          required: true
      responses:
        200:
          description: Return a new access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: 
                    type: string
        400:
          description: Invalid refresh token provided in header

  /auth/oauth:
    post:
      summary: Login or Register a user and return user credentials.
      operationId: controllers.auth_controller.handle_authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The grant code from the oauth2 flow
      responses: 
        200:
          description: return client_id and access/refresh tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCredentials'
        400:
          description: Invalid authorization code 


  /test/tasks:
    get:
      summary: Get all tasks in the database
      operationId: controllers.controller.get_all_tasks
      responses:
        200:
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      operationId: controllers.controller.create_task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        201:
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /test/tasks/{task_id}:
    parameters:
      - name: task_id
        in: path
        required: true
        description: The ID of the task
        schema:
          type: string
    get:
      summary: Get a single task by ID
      operationId: controllers.controller.get_task_by_id
      responses:
        200:
          description: A single task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found
    put:
      summary: Update an existing task
      operationId: controllers.controller.update_task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        200:
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found
    delete:
      summary: Delete a task
      operationId: controllers.controller.delete_task
      responses:
        204:
          description: Task deleted successfully
        404:
          description: Task not found

components:
  schemas:
    Task:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The unique identifier for a task
        name:
          type: string
          description: The name of the task
        completed:
          type: boolean
          description: The completion status of the task
          default: false
    TaskInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the task
        completed:
          type: boolean
          description: The completion status of the task
          default: false
    UserCredentials:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          description: The access token
        email:
          description: The account email
    error_message:
      type: object
      properties:
        message:
          type: string
