openapi: 3.0.0

info:
  title: KU SEEK 
  description: CRUD operations for KU SEEK
  version: 2.0.0

servers:
  - url: /api/v1

paths:
  /csrf-token:
    get:
      summary: Get a csrf-token for form validation
      operationId: controllers.auth_controller.get_csrf_token
      responses:
        200:
          description: Return a csrf-token for validation
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrf_token: 
                    type: string

  /refresh:
    get:
      summary: Get a new access token from a refesh token
      operationId: controllers.auth_controller.get_new_access_token
      parameters:
        - in: cookie
          name: refresh_token
          schema:
            type: string
          required: true
      responses:
        200:
          description: Return a new access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: 
                    type: string
        400:
          description: Invalid refresh token provided in header

  /auth/oauth:
    post:
      summary: Login or Register a user and return user credentials.
      operationId: controllers.auth_controller.handle_authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The grant code from the oauth2 flow
      responses: 
        200:
          description: return client_id and access/refresh tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCredentials'
        400:
          description: Invalid authorization code 

  /jobs:
    get:
      summary: Get all jobs in the database if have job_id it will return only one job.
      operationId: controllers.controller.get_all_jobs
      parameters:
        - name: job_id
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: A list of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
  
    post:
      summary: Post new job to the database.
      operationId: controllers.controller.post_job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPost'

      responses:
        201:
          description: A list of filtered jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
    
  /jobs/search:
    post:
      summary: Get filtered jobs from the database
      operationId: controllers.controller.get_filtered_jobs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobFilter'

      responses:
        200:
          description: A list of filtered jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
   
  /bookmarks:
    get:
      summary: Get all bookmarked jobs in the database
      operationId: controllers.controller.get_bookmark_jobs
      responses:
        200:
          description: A list of bookmarked jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
    post:
      summary: Add new bookmarked job to the database
      operationId: controllers.controller.post_bookmark_jobs 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkInput'
      responses:
        200:
          description: A new of bookmarked job
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/BookmarkOutput'
    
    delete:
      summary: Delete bookmarked job in the database
      operationId: controllers.controller.delete_bookmark_jobs 
      parameters:
        - name: job_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Bookmark deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkOutput'


  /test/tasks:
    get:
      summary: Get all tasks in the database
      operationId: controllers.controller.get_all_tasks
      responses:
        200:
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      operationId: controllers.controller.create_task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        201:
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /test/tasks/{task_id}:
    parameters:
      - name: task_id
        in: path
        required: true
        description: The ID of the task
        schema:
          type: string
    get:
      summary: Get a single task by ID
      operationId: controllers.controller.get_task_by_id
      responses:
        200:
          description: A single task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found
    put:
      summary: Update an existing task
      operationId: controllers.controller.update_task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        200:
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found
    delete:
      summary: Delete a task
      operationId: controllers.controller.delete_task
      responses:
        204:
          description: Task deleted successfully
        404:
          description: Task not found

  /users/{user_id}/profile:
    get:
      summary: Get the user profile data
      operationId: controllers.controller.get_user_profile
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user whose profile to created
          schema:
            type: string
      
      responses:
        200:
          description: Return the user profile data created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  
  /users/profile:
        
    post:
      summary: Create an user profile
      operationId: controllers.controller.create_profile
 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileInput'
      
      responses:
        200:
          description: User profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        
        400:
          description: Error BAD REQUEST
        
        409:
          description: Profile already exists for user

    patch:
      summary: Update an existing user profile
      operationId: controllers.controller.update_profile
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileInput'

      responses:
        200:
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        
        400:
          description: Error BAD REQUEST

        404:
          description: user profile not found

  /application:
    get:
      summary: Get user job applications
      description: Retrieve the user's submitted job applications using the access token.
      operationId: controllers.controller.fetch_user_job_applications
      responses:
        200:
          description: Applications retrieved successfully.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/JobApplication'
        400:
          description: Invalid credentials

  /application/{job_id}:
    parameters:
      - name: job_id
        in: path
        required: true
        description: The ID of the related job post.
        schema:
          type: string
    get:
      summary: Get applications by job ID
      description: Retrieve all job applications for a specific job.
      operationId: controllers.controller.fetch_job_applications_from_job
      responses:
        200:
          description: Applications retrieved successfully.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/JobApplication'
        400:
          description: "Invalid job or credentials provided."

    post:
      summary: Create new job application
      description: Create a new job application.
      operationId: controllers.controller.create_job_application
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ApplicationSubmission'
      responses:
        201:
          description: Application created successfully.
          content:
            application/json:
              schema: 
                type: object

                $ref: '#/components/schemas/JobApplication'
        400:
          description: Invalid request body.


  /tags:
    post:
      summary: Create a new tag or return existing tag id
      operationId: controllers.controller.post_tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagInput'
      responses:
        200:
          description: Existing tag returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        201:
          description: New tag created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'

  /tags/{tag_id}:
    parameters:
      - name: tag_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get a tag by id
      operationId: controllers.controller.get_tag_by_id
      responses:
        200:
          description: Tag found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        404:
          description: Tag not found

  /terms:
    get:
      summary: Get all terms
      operationId: controllers.controller.get_all_terms
      responses:
        200:
          description: A list of terms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Term'

  /terms/{term_id}:
    parameters:
      - name: term_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get a term by id
      operationId: controllers.controller.get_term_by_id
      responses:
        200:
          description: Term found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        404:
          description: Term not found


components:
  securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT

  schemas:
    Job:
        type: object
        required:
          - id
          - company_id
          - title
          - status
          - created_at
        properties:
          id:
            type: integer
            description: The unique identifier for a job
            example: 1
          company_id:
            type: integer
            description: The ID of the company posting the job
            example: 5
          description:
            type: string
            description: Detailed description of the job
            example: "We are looking for a passionate software developer to join our team (Just Kidding)..."
          title:
            type: string
            maxLength: 50
            description: The job title/position title
            example: "Software Developer"
          salary_min:
            type: number
            format: float
            description: Minimum salary offered
            example: 30000.0
          salary_max:
            type: number
            format: float
            description: Maximum salary offered
            example: 50000.0
          location:
            type: string
            maxLength: 255
            description: Job location
            example: "Bangkok, Thailand"
          work_hours:
            type: string
            maxLength: 20
            description: Working hours
            example: "9:00 AM - 5:00 PM"
          job_type:
            type: string
            maxLength: 40
            description: Type of employment
            example: "full-time"
          job_level:
            type: string
            maxLength: 40
            description: Type of Job Level. 
            example: "internship, entry-level, mid-level, Senior-level"
          status:
            type: string
            maxLength: 20
            description: Current status of the job posting
            enum: ["pending", "approved", "rejected"]
            default: "pending"
            example: "approved"
          visibility:
            type: boolean
            description: Whether the job is visible to students
            example: true
          capacity:
            type: integer
            description: Number of positions available
            example: 3
          end_date:
            type: string
            format: date-time
            description: Application deadline
            example: "2025-12-31T23:59:59Z"
          created_at:
            type: string
            format: date-time
            description: When the job was created
            example: "2025-09-06T10:30:00Z"
          approved_by:
            type: integer
            description: ID of the user who approved this job
            example: 10
          skills:
            type: array
            description: List of required skills for this job
            items:
              $ref: '#/components/schemas/Skill'
          tags:
            type: array
            description: List of tags associated with this job
            items:
              $ref: '#/components/schemas/Tag'
          company:
            $ref: '#/components/schemas/Company'
    
    JobFilter:
      type: object
      properties:
        title:
          type: string
          maxLength: 50
          description: The job title/position title
        salary_min:
          type: number
          format: float
          description: Minimum salary offered
        salary_max:
          type: number
          format: float
          description: Maximum salary offered
        location:
          type: string
          maxLength: 255
          description: Job location
        work_hours:
          type: string
          maxLength: 20
          description: Working hours
        job_type:
          type: string
          maxLength: 40
          description: Type of employment
        job_level:
            type: string
            maxLength: 40
            description: Type of Job Level. 
            example: "internship, entry-level, mid-level, Senior-level"
        skill_name:
          type: string
          maxLength: 40
          description: Skill Name
        tag_name:
          type: string
          maxLength: 40
          description: Tag Name
        capacity:
          type: integer
          description: Number of positions available
        end_date:
            type: string
            format: date-time
            description: Application deadline
            example: "2025-12-31T23:59:59Z"
        company_name:
          type: string
          maxLength: 255
          description: Company Name
        company_type:
          type: string
          maxLength: 50
          description: Company Type
        company_industry:
          type: string
          maxLength: 100
          description: Company Industry
      

    JobPost:
      type: object
      required:
        - title
        - salary_min
        - salary_max
        - location
        - work_hours
        - job_type
        - job_level
        - capacity
        - end_date
      properties:
        description:
          type: string
          description: Detailed description of the job
          example: "We are looking for an experienced Python developer to join our dynamic team..."
        title:
          type: string
          maxLength: 50
          description: The job title/position title
          example: "Senior Python Developer"
        salary_min:
          type: number
          format: float
          description: Minimum salary offered
          example: 80000.0
        salary_max:
          type: number
          format: float
          description: Maximum salary offered
          example: 120000.0
        location:
          type: string
          maxLength: 255
          description: Job location
          example: "Bangkok, Thailand"
        work_hours:
          type: string
          maxLength: 20
          description: Working hours
          example: "9:00 AM - 5:00 PM"
        job_type:
          type: string
          maxLength: 40
          description: Type of employment
          example: "full-time"
        job_level:
          type: string
          maxLength: 40
          description: Type of Job Level
          example: "Senior-level"
        capacity:
          type: integer
          description: Number of positions available
          example: 2
        end_date:
          type: string
          format: date-time
          description: Application deadline
          example: "2025-12-31T23:59:59Z"
        skill_ids:
          type: array
          description: Array of skill IDs required for this job
          items:
            type: integer
          example: [1, 2, 3]
        tag_ids:
          type: array
          description: Array of tag IDs associated with this job
          items:
            type: integer
          example: [5, 6]


    Skill:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for a skill
          example: 1
        name:
          type: string
          maxLength: 40
          description: The name of the skill
          example: "JavaScript"
        type:
          type: string
          maxLength: 40
          description: The type/category of the skill
          example: "Programming Language"

    Tag:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for a tag
          example: 1
        name:
          type: string
          maxLength: 40
          description: The name of the tag
          example: "Remote Work"

    Company:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for a company
          example: 1
        user_id:
          type: integer
          description: The user ID associated with this company
          example: 5
        company_name:
          type: string
          maxLength: 255
          description: Name of the company
          example: "Tech Solutions Ltd."
        company_type:
          type: string
          maxLength: 50
          description: Type of company
          example: "Technology"
        company_industry:
          type: string
          maxLength: 100
          description: Industry sector
          example: "Software Development"
        company_size:
          type: string
          maxLength: 50
          description: Size of the company
          example: "50-100 employees"
        company_website:
          type: string
          maxLength: 255
          description: Company website URL
          example: "https://www.techsolutions.com"
        full_location:
          type: string
          maxLength: 255
          description: Full address of the company
          example: "123 Tech Street, Bangkok, Thailand 10110"
          
    Task:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The unique identifier for a task
        name:
          type: string
          description: The name of the task
        completed:
          type: boolean
          description: The completion status of the task
          default: false
    TaskInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the task
        completed:
          type: boolean
          description: The completion status of the task
          default: false
    UserCredentials:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          description: The access token
        email:
          description: The account email
    error_message:
      type: object
      properties:
        message:
          type: string
    token:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          type: string
          description: The access token
        refresh_token:
          type: string
          description: The refresh token
    
    BookmarkInput:
      type: object
      required:
        - job_id
      properties:
        job_id:
          type: integer
          description: The job_id
    
    BookmarkOutput:
      type: object
      properties:
        "id":
          type: integer
          description: id of bookmark job
        job_id:
          type: integer
          description: The job_id
        student_id:
          type: integer
          description: The student_id
        create_at:
          type: string
          description: date that this bookmark got created
 
    UserProfileInput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the user
          example: "Hu"
        last_name:
          type: string
          description: The last name of the user
          example: "Tao"
        about:
          type: string
          description: A brief description or bio of the user
          example: "Computer Science student interested in web development"
        location:
          type: string
          description: The location or address of the user
          example: "Bangkok, Thailand"
        contact_email:
          type: string
          format: email
          description: The contact email address of the user
          example: "hutao@ku.th"
        gender:
          type: string
          description: The gender of the user
          enum: ["M", "F"]
          example: "M"
        age:
          type: integer 
          description: The age of the user
          example: 22
        user_type:
          type: string
          description: The type of user
          enum: ["student", "company", "professor", "admin"]
          example: "student"
        profile_img:
          type: string
          format: uri
          description: URL or path to the user's profile image
        banner_img:
          type: string
          format: uri
          description: URL or path to the user's banner/cover image
        phone_number:
          type: string
          description: The phone number of the user
          example: "0812345678"
      
    UserProfile:
      type: object
      required:
        - user_id
        - first_name
        - last_name
        - user_type
        - is_verified
      properties:
        user_id:
          type: string
          format: uuid
          description: The unique identifier for the user (foreign key to User table)
          example: "550e8400-e29b-41d4-a716-446655440000"
        first_name:
          type: string
          maxLength: 100
          description: The first name of the user
          example: "Sweet"
        last_name:
          type: string
          maxLength: 100
          description: The last name of the user
          example: "Nature"
        about:
          type: string
          nullable: true
          description: A brief description or bio of the user
          example: "Computer Science student interested in web development"
        location:
          type: string
          maxLength: 100
          nullable: true
          description: The location or address of the user
          example: "Bangkok, Thailand"
        contact_email:
          type: string
          format: email
          maxLength: 255
          nullable: true
          description: The contact email address of the user
          example: "sweet_nature@ku.th"
        gender:
          type: string
          maxLength: 1
          nullable: true
          description: The gender of the user (single character)
          enum: ["M", "F"]  
          example: "M"
        age:
          type: integer
          nullable: true
          description: The age of the user
          example: 22
        user_type:
          type: string
          maxLength: 20
          description: The type of user
          enum: ["student", "company", "professor", "admin"]
          example: "student"
        profile_img:
          type: string
          maxLength: 100
          nullable: true
          description: Path or filename of the user's profile image
          example: "profile_123456.jpg"
        banner_img:
          type: string
          maxLength: 100
          nullable: true
          description: Path or filename of the user's banner/cover image
          example: "banner_123456.jpg"
        phone_number:
          type: string
          maxLength: 20
          nullable: true
          description: The phone number of the user
          example: "0967983241"
        is_verified:
          type: boolean
          description: Whether the user profile is verified
          default: false
          example: false

    JobApplication:
      type: object
      properties:
        applicant:
          type: object
          properties:
            user_id:
              type: string
              nullable: false
            first_name:
              type: string
              nullable: false
              example: "John"
            last_name:
              type: string
              nullable: false
              example: "Doe"
            contact_email:
              type: string
              nullable: false
        job_details:
          type: object
          properties:
            job_id:
              type: string
              nullable: false
            job_title:
              type: string
              nullable: false
        resume:
          type: string
          nullable: false
        letter_of_application:
          type: string
          nullable: false
        years_of_experience:
          type: string
          nullable: false
        expected_salary:
          type: string
          nullable: false
        phone_number:
          type: string
          nullable: false
        status:
          type: string
          enum: ["pending", "accepted", "rejected"]
          example: "pending"
        applied_at:
          type: string
          format: date-time
          example: "2025-10-07T18:30:00Z"

    ApplicationSubmission:
      type: object
      required:
        - first_name
        - last_name
        - email
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        years_of_experience:
          type: string
          example: "2"
        expected_salary:
          type: string
          example: "15000"
        phone_number:
          type: string
          example: "0812345678"
        resume:
          anyOf:
            - type: string
              format: binary
              description: Upload new resume file
            - type: string
              description: Existing resume file ID
        application_letter:
          type: string
          format: binary
          description: Upload new application letter file

    TagInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 40
          example: "Remote Work"

    Term:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Python"
        type:
          type: string
          example: "Programming Language"
