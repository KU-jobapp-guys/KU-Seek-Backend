openapi: 3.0.0

info:
  title: KU SEEK 
  description: CRUD operations for KU SEEK
  version: 2.0.0

servers:
  - url: /api/v1

paths:
  /csrf-token:
    get:
      summary: Get a csrf-token for form validation
      operationId: controllers.auth_controller.get_csrf_token
      responses:
        200:
          description: Return a csrf-token for validation
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrf_token: 
                    type: string

  /refresh:
    get:
      summary: Get a new access token from a refesh token
      operationId: controllers.auth_controller.get_new_access_token
      parameters:
        - in: cookie
          name: refresh_token
          schema:
            type: string
          required: true
      responses:
        200:
          description: Return a new access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: 
                    type: string
        400:
          description: Invalid refresh token provided in header

  /auth/oauth:
    post:
      summary: Login or Register a user and return user credentials.
      operationId: controllers.auth_controller.handle_authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The grant code from the oauth2 flow
      responses: 
        200:
          description: return client_id and access/refresh tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCredentials'
        400:
          description: Invalid authorization code 


  /test/tasks:
    get:
      summary: Get all tasks in the database
      operationId: controllers.controller.get_all_tasks
      responses:
        200:
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      operationId: controllers.controller.create_task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        201:
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /test/tasks/{task_id}:
    parameters:
      - name: task_id
        in: path
        required: true
        description: The ID of the task
        schema:
          type: string
    get:
      summary: Get a single task by ID
      operationId: controllers.controller.get_task_by_id
      responses:
        200:
          description: A single task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found
    put:
      summary: Update an existing task
      operationId: controllers.controller.update_task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        200:
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found
    delete:
      summary: Delete a task
      operationId: controllers.controller.delete_task
      responses:
        204:
          description: Task deleted successfully
        404:
          description: Task not found

  /users/{user_id}/profile:
    get:
      summary: Get the user profile data
      operationId: controllers.controller.get_user_profile
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user whose profile to created
          schema:
            type: string
      
      responses:
        200:
          description: Return the user profile data created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  
  /users/profile:
        
    post:
      summary: Create an user profile
      operationId: controllers.controller.create_profile
 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileInput'
      
      responses:
        200:
          description: User profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        
        400:
          description: Error BAD REQUEST
        
        409:
          description: Profile already exists for user

    patch:
      summary: Update an existing user profile
      operationId: controllers.controller.update_profile
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileInput'

      responses:
        200:
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        
        400:
          description: Error BAD REQUEST

        404:
          description: user profile not found

  /application:
    get:
      summary: Get user job applications
      description: Retrieve the user's submitted job applications using the access token.
      operationId: controllers.controller.fetch_user_job_applications
      responses:
        200:
          description: Applications retrieved successfully.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/JobApplication'
        400:
          description: Invalid credentials

  /application/{job_id}:
    parameters:
      - name: job_id
        in: path
        required: true
        description: The ID of the related job post.
        schema:
          type: string
    get:
      summary: Get applications by job ID
      description: Retrieve all job applications for a specific job.
      operationId: controllers.controller.fetch_job_applications_from_job
      responses:
        200:
          description: Applications retrieved successfully.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/JobApplication'
        400:
          description: "Invalid job or credentials provided."

    post:
      summary: Create new job application
      description: Create a new job application.
      operationId: controllers.controller.create_job_application
      requestBody:
        required: true
        content:
          application/json:
            schema: {}  # TODO: define schema
      responses:
        201:
          description: Application created successfully.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/JobApplication'
        400:
          description: Invalid request body.


components:
  securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT

  schemas:
    Task:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The unique identifier for a task
        name:
          type: string
          description: The name of the task
        completed:
          type: boolean
          description: The completion status of the task
          default: false
    TaskInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the task
        completed:
          type: boolean
          description: The completion status of the task
          default: false
    UserCredentials:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          description: The access token
        email:
          description: The account email
    error_message:
      type: object
      properties:
        message:
          type: string
    token:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          type: string
          description: The access token
        refresh_token:
          type: string
          description: The refresh token
    
    UserProfileInput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the user
          example: "Hu"
        last_name:
          type: string
          description: The last name of the user
          example: "Tao"
        about:
          type: string
          description: A brief description or bio of the user
          example: "Computer Science student interested in web development"
        location:
          type: string
          description: The location or address of the user
          example: "Bangkok, Thailand"
        contact_email:
          type: string
          format: email
          description: The contact email address of the user
          example: "hutao@ku.th"
        gender:
          type: string
          description: The gender of the user
          enum: ["M", "F"]
          example: "M"
        age:
          type: integer 
          description: The age of the user
          example: 22
        user_type:
          type: string
          description: The type of user
          enum: ["student", "company", "professor", "admin"]
          example: "student"
        profile_img:
          type: string
          format: uri
          description: URL or path to the user's profile image
        banner_img:
          type: string
          format: uri
          description: URL or path to the user's banner/cover image
        phone_number:
          type: string
          description: The phone number of the user
          example: "0812345678"
      
    UserProfile:
      type: object
      required:
        - user_id
        - first_name
        - last_name
        - user_type
        - is_verified
      properties:
        user_id:
          type: string
          format: uuid
          description: The unique identifier for the user (foreign key to User table)
          example: "550e8400-e29b-41d4-a716-446655440000"
        first_name:
          type: string
          maxLength: 100
          description: The first name of the user
          example: "Sweet"
        last_name:
          type: string
          maxLength: 100
          description: The last name of the user
          example: "Nature"
        about:
          type: string
          nullable: true
          description: A brief description or bio of the user
          example: "Computer Science student interested in web development"
        location:
          type: string
          maxLength: 100
          nullable: true
          description: The location or address of the user
          example: "Bangkok, Thailand"
        contact_email:
          type: string
          format: email
          maxLength: 255
          nullable: true
          description: The contact email address of the user
          example: "sweet_nature@ku.th"
        gender:
          type: string
          maxLength: 1
          nullable: true
          description: The gender of the user (single character)
          enum: ["M", "F"]  
          example: "M"
        age:
          type: integer
          nullable: true
          description: The age of the user
          example: 22
        user_type:
          type: string
          maxLength: 20
          description: The type of user
          enum: ["student", "company", "professor", "admin"]
          example: "student"
        profile_img:
          type: string
          maxLength: 100
          nullable: true
          description: Path or filename of the user's profile image
          example: "profile_123456.jpg"
        banner_img:
          type: string
          maxLength: 100
          nullable: true
          description: Path or filename of the user's banner/cover image
          example: "banner_123456.jpg"
        phone_number:
          type: string
          maxLength: 20
          nullable: true
          description: The phone number of the user
          example: "0967983241"
        is_verified:
          type: boolean
          description: Whether the user profile is verified
          default: false
          example: false

    JobApplication:
      type: object
      properties:
        applicant:
          type: object
          properties:
            user_id:
              type: string
              nullable: false
            first_name:
              type: string
              nullable: false
              example: "John"
            last_name:
              type: string
              nullable: false
              example: "Doe"
            contact_email:
              type: string
              nullable: false
        job_details:
          type: object
          properties:
            job_id:
              type: string
              nullable: false
            job_title:
              type: string
              nullable: false
        resume:
          type: string
          nullable: false
        letter_of_application:
          type: string
          nullable: false
        years_of_experience:
          type: string
          nullable: false
        expected_salary:
          type: string
          nullable: false
        phone_number:
          type: string
          nullable: false
        status:
          type: string
          enum: ["pending", "accepted", "rejected"]
          example: "pending"
        applied_at:
          type: string
          format: date-time
          example: "2025-10-07T18:30:00Z"
