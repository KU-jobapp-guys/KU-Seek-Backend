"""Module for running the flask application."""

import sys
import os
from decouple import config, Csv
from flask_cors import CORS
from flask_wtf import CSRFProtect
from controllers.db_controller import BaseController


if not os.path.exists(".env"):
    print(".env file not found.You may create one from 'sample-env.txt'.")
    sys.exit(1)

OPENAPI_STUB_DIR = config("OPENAPI_STUB_DIR", default="swagger_server")

if not os.path.exists(OPENAPI_STUB_DIR):
    print(
        f"Folder '{OPENAPI_STUB_DIR}' not found.  "
        "Please create the folder and extract zip file "
        "generated by openapi-generator into it."
    )
    sys.exit(1)

sys.path.append(OPENAPI_STUB_DIR)

try:
    import connexion
except ModuleNotFoundError:
    print(
        "Please install all required packages by running:"
        " pip install -r requirements.txt"
    )
    sys.exit(1)

from openapi_server import encoder  # noqa: E402


def create_app(engine=None):
    """
    Setups and configure the application.

    Args:
        engine: Optional database engine to use. If None, a new engine will be created.

    Returns: A configured connexion app.
    """
    app = connexion.App(__name__, specification_dir="./openapi/")
    app.app.json_encoder = encoder.JSONEncoder
    app.add_api(
        "ku-seek-api.yml",
        arguments={"title": "KU SEEK API"},
        pythonic_params=True,
    )
    # setup CORS Allowed origins
    CORS(
        app.app,
        resources={
            r"/*": {
                "origins": config(
                    "ALLOWED_ORIGINS", cast=Csv(), default="http://localhost:5173"
                )
            }
        },
        supports_credentials=True,
    )
    # setup CSRF (disabling for now)
    app.app.secret_key = config("SECRET_KEY", default="very-secure-secret-key")
    CSRFProtect(app.app)

    app.app.config["Database"] = BaseController()
    # set database controller if provided
    if engine:
        app.app.config["Database"] = engine

    return app


app = create_app()

if __name__ == "__main__":
    app.run(port=8000, debug=True, use_reloader=False)